WITH task_durations AS (
    SELECT 
        t1.createdby,
        t1.completedby AS task_start,
        LEAD(t1.completedby) OVER (PARTITION BY t1.createdby ORDER BY t1.completedby) AS task_end,
        c.clock_in,
        c.clock_out
    FROM tasks t1
    JOIN employees c ON t1.createdby = c.employee_id
),
work_hours_filtered AS (
    SELECT 
        td.createdby,
        td.task_start,
        td.task_end,
        td.clock_in,
        td.clock_out,
        GREATEST(td.task_start, td.clock_in) AS work_start,
        LEAST(td.task_end, td.clock_out) AS work_end
    FROM task_durations td
    WHERE td.task_end IS NOT NULL -- ბოლო Task არ უნდა ჩავთვალოთ
),
final_calculation AS (
    SELECT 
        whf.createdby,
        whf.task_start,
        whf.task_end,
        whf.work_start,
        whf.work_end,
        -- სამუშაო დრო საათებში
        EXTRACT(EPOCH FROM (whf.work_end - whf.work_start)) / 3600 
        -- გამოვაკლოთ შესვენება მხოლოდ მაშინ, თუ ის შედის სამუშაო შუალედში
        - CASE 
            WHEN whf.work_start <= whf.work_start::DATE + INTERVAL '10:45' 
             AND whf.work_end >= whf.work_start::DATE + INTERVAL '10:30' 
            THEN 15 / 60.0 ELSE 0 END
        - CASE 
            WHEN whf.work_start <= whf.work_start::DATE + INTERVAL '14:00' 
             AND whf.work_end >= whf.work_start::DATE + INTERVAL '13:30' 
            THEN 30 / 60.0 ELSE 0 END
        AS usedtime
    FROM work_hours_filtered whf
)
UPDATE tasks t
SET usedtime = fc.usedtime
FROM final_calculation fc
WHERE t.completedby = fc.task_start AND t.createdby = fc.createdby;

////////

import { NextResponse } from "next/server";
import { connectDB } from "@/app/lib/db";
import sql from "mssql";
import axios from "axios";

interface ClickUpTask {
  id: string;
  name: string;
  status: {
    status: string;
  };
  custom_fields: {
    id: string;
    name: string;
    value: any;
  }[];
}

interface ClickUpTaskResponse {
  tasks: ClickUpTask[];
}

const API_TOKEN = process.env.CLICKUP_API_TOKEN;
const LIST_ID = process.env.CLICKUP_LIST_ID;

const BASE_URL = "https://api.clickup.com/api/v2";
const HEADERS = {
  Authorization: API_TOKEN,
  "Content-Type": "application/json",
};

// Function to update a custom field in ClickUp
async function updateCustomField(taskId: string, fieldId: string, value: any) {
  try {
    const response = await axios.post(
      `${BASE_URL}/task/${taskId}/field/${fieldId}`,
      { value },
      { headers: HEADERS }
    );
    return response.data;
  } catch (error: any) {
    console.error(
      `❌ Error Updating Field ${fieldId} for Task ${taskId}:`,
      error.response?.data || error.message
    );
    throw error;
  }
}

export async function GET() {
  try {
    const pool = await connectDB();
    console.log("Connection successful!");
    const response = await axios.get<ClickUpTaskResponse>(
      `${BASE_URL}/list/${LIST_ID}/task`,
      { headers: HEADERS }
    );

    const tasks = response.data.tasks;

    // Process tasks and update "Rework Cost" if needed
    const transformedTasks = await Promise.all(
      tasks.map(async (task) => {
        const partNumberField = task.custom_fields.find(
          (field) => field.name === "Rwk: Part Number"
        );
        const reworkCostField = task.custom_fields.find(
          (field) => field.name === "Rework Cost"
        );

        const partNumber: any = partNumberField?.value;
        let reworkCost = reworkCostField?.value;

        // **Only proceed if "Rework Cost" is NOT already set**
        if (partNumber && (reworkCost === null || reworkCost === undefined)) {
          const partNo = partNumber;
          const rev = "0";

          const query = `
            SELECT 
              i."PartNo", 
              i."Rev",
              CASE 
                WHEN m."MaterialClass" IN ('PL', 'PPL', 'WM', 'EM') 
                THEN i."Weight" * ((m."Dim1" / 1000 * m."Dim2" / 1000) * (m."Dim3" / 1000) * m."MassDensity") * im."SourceCost"
                WHEN m."MaterialClass" IN ('RB', 'SB', 'FL', 'AN', 'RT', 'CH', 'HS', 'UC', 'UB', 'WP', 'MLNG') 
                THEN (i."Length" / m."Dim4") * im."SourceCost"
                ELSE NULL
              END AS "MaterialCost"
            FROM "Item" i
            LEFT JOIN "Material" m ON i."MaterialStandard" = m."PartNo"
            LEFT JOIN "Item" im ON m."PartNo" = im."PartNo" 
              AND im."Rev" = (
                SELECT MAX(im2."Rev") 
                FROM "Item" im2 
                WHERE im2."PartNo" = im."PartNo"
              )
            WHERE i."PartNo" = @partNo
              AND i."Rev" = @rev;
          `;

          const result = await pool
            .request()
            .input("partNo", sql.VarChar, partNo)
            .input("rev", sql.VarChar, rev)
            .query(query);

          if (result.recordset.length === 0) {
            console.error("No results found for part number:", partNumber);
            return null;
          }

          const resultCostValue = result.recordset[0].MaterialCost;

          // **Only update if a valid material cost is found**
          if (resultCostValue !== null && reworkCostField) {
            await updateCustomField(task.id, reworkCostField.id, resultCostValue);
            reworkCost = resultCostValue;
          }
        }

        return {
          id: task.id,
          name: task.name,
          status: task.status.status,
          customFields: task.custom_fields.map((field) => ({
            id: field.id,
            name: field.name,
            value: field.value,
            displayValue:
              typeof field.value === "object" && field.value !== null
                ? field.value.percent_complete || JSON.stringify(field.value)
                : field.value,
          })),
          partNumber,
          reworkCost,
        };
      })
    );

    return NextResponse.json(transformedTasks);
  } catch (error: any) {
    console.error(
      "❌ Error Fetching Tasks:",
      error.response?.data || error.message
    );
    return NextResponse.json(
      { error: "Failed to fetch tasks" },
      { status: 500 }
    );
  }
}





/////////

USE [pulseplm]
GO

SELECT TOP 10
      [ItemId]
      ,[PartNo]
      ,[Rev]
      ,[Description1]
      ,[Description2]
      ,[Description3]
      ,[Classification]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[Material]
      ,[Length]
      ,[Width]
      ,[Thickness]
      ,[Weight]
      ,[Volume]
      ,[Hours]
      ,[UnitMeasure]
      ,[Status]
      ,[Ncr]
      ,[Obs]
      ,[Wip]
      ,[Prototype]
      ,[Production]
      ,[Phantom]
      ,[BulkIssue]
      ,[NeedSave]
      ,[NonStock]
      ,[Module]
      ,[Reserved]
      ,[ReservedBy]
      ,[Notes]
      ,[Price]
      ,[LabourCost]
      ,[MaterialCost]
      ,[MaterialCostCalculated]
      ,[SourceCost]
      ,[MiscCost]
      ,[Path]
      ,[LeadTime]
      ,[Location]
      ,[MinStock]
      ,[MaxStock]
      ,[CurrentStock]
      ,[WipStock]
      ,[AllocatedStock]
      ,[OrderStock]
      ,[IssuedStock]
      ,[ReorderStock]
      ,[BackorderStock]
      ,[Origin]
      ,[ChildCost]
      ,[ActionNo]
      ,[ActionNoPending]
      ,[ActionNoIsPending]
      ,[ActionNoRetire]
      ,[ChangeNotes]
      ,[ReplacesPartNo]
      ,[ReplacesRev]
      ,[ReplacedByPartNo]
      ,[ReplacedByRev]
      ,[NotReleased]
      ,[ModelDriven]
      ,[Software]
      ,[Filename]
      ,[OriginalFilename]
      ,[OriginalSize]
      ,[CadType]
      ,[FamilyName]
      ,[ModelName]
      ,[Alpha]
      ,[Warehouse]
      ,[OldStock]
      ,[NewStock]
      ,[UsedOn]
      ,[FileByteCount]
      ,[RevisedBy]
      ,[RevisedOn]
      ,[LastSavedBy]
      ,[LastSavedOn]
      ,[PUnitMeasure]
      ,[UUnitMeasure]
      ,[Buyer]
      ,[Cycle]
      ,[Crc]
      ,[Version]
      ,[Priority]
      ,[TaxCode]
      ,[NominalAccount]
      ,[TaxCodeSales]
      ,[NominalAccountSales]
      ,[Family]
      ,[Supplier]
      ,[PaintCode]
      ,[Factor]
      ,[UnitConversion]
      ,[AbcClass]
      ,[AbcClass1]
      ,[CutLhs]
      ,[CutRhs]
      ,[CutProfile]
      ,[MaterialStandard]
      ,[Commodity]
      ,[ProductClass]
      ,[QapProcess]
      ,[RequireInspection]
      ,[SeparateWorkOrder]
      ,[Inseparable]
      ,[SerialNoSensitive]
      ,[CompanyId]
      ,[RowId]
      ,[Timestamp]
      ,[ProcessTemplateId]
      ,[WorkCentresComplete]
      ,[NoDiscount]
      ,[StockUnitOfMeasureId]
      ,[SalesUoMId]
      ,[StockToSalesUoMConversion]
      ,[SalesTaxCodeId]
      ,[SalesNominalCodeId]
      ,[PurchaseUoMId]
      ,[PurchaseToStockUoMConversion]
      ,[PurchaseTaxCodeId]
      ,[PurchaseNominalCodeId]
      ,[Finish]
      ,[ReverseKitted]
      ,[WorkcentreProcessTemplateId]
      ,[Type]
      ,[OverridePermissionInheritance]
      ,[Colour]
      ,[UnitConversion2]
      ,[FinishedGoods]
      ,[IsKit]
      ,[Serviceable]
      ,[SUnitMeasure]
      ,[Country]
      ,[ExcludeChildren]
  FROM [dbo].[Item]
GO






automate.io
Password: Sense-Allow-Fifth5
Hostname: dungannon.mallaghangroup.com
Port: 1433
Database: pulseplm





-- Make sure you're using the correct database:
-- \c your_database_name;

-- Extension for UUID generation (if needed):
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE public."Item" (
    -- SQL Server's [uniqueidentifier] -> PostgreSQL UUID
    "ItemId"               uuid                NOT NULL DEFAULT uuid_generate_v4(),

    -- SQL Server [nvarchar](...) -> PostgreSQL varchar(...)
    "PartNo"               varchar(255)        NOT NULL,
    -- SQL Server [real] remains 'real' in Postgres
    "Rev"                  real                NOT NULL,

    "Description1"         varchar(255),
    "Description2"         varchar(255),
    "Description3"         varchar(255),
    "Classification"       varchar(255),
    "CreatedBy"            varchar(50),

    -- SQL Server [datetime] -> PostgreSQL timestamp (no time zone)
    "CreatedOn"            timestamp,
    "Material"             varchar(255),
    "Length"               numeric(15, 5),
    "Width"                numeric(15, 5),
    "Thickness"            numeric(15, 5),
    "Weight"               real,
    "Volume"               real,
    "Hours"                real,
    "UnitMeasure"          varchar(50),
    "Status"               varchar(50),

    -- SQL Server [bit] -> PostgreSQL boolean
    "Ncr"                  boolean NOT NULL DEFAULT false,
    "Obs"                  boolean NOT NULL DEFAULT false,
    "Wip"                  boolean DEFAULT false,
    "Prototype"            boolean DEFAULT false,
    "Production"           boolean DEFAULT false,
    "Phantom"              boolean NOT NULL DEFAULT false,
    "BulkIssue"            boolean NOT NULL DEFAULT false,
    "NeedSave"             boolean DEFAULT false,
    "NonStock"             boolean NOT NULL DEFAULT true,
    "Module"               boolean NOT NULL DEFAULT false,
    "Reserved"             boolean NOT NULL DEFAULT false,
    "ReservedBy"           varchar(50),

    -- SQL Server [nvarchar](max) -> PostgreSQL text
    "Notes"                text,
    "Price"                numeric(15, 5) DEFAULT 0,
    "LabourCost"           numeric(15, 5) DEFAULT 0,
    "MaterialCost"         numeric(15, 5) DEFAULT 0,
    "MaterialCostCalculated" numeric(15, 5) DEFAULT 0,
    "SourceCost"           numeric(15, 5) DEFAULT 0,
    "MiscCost"             numeric(15, 5) DEFAULT 0,
    "Path"                 varchar(255),
    "LeadTime"             integer,
    "Location"             varchar(50),

    "MinStock"             numeric(10, 3) DEFAULT 0,
    "MaxStock"             numeric(10, 3) DEFAULT 0,
    "CurrentStock"         numeric(10, 3) DEFAULT 0,
    "WipStock"             numeric(10, 3) DEFAULT 0,
    "AllocatedStock"       numeric(10, 3) DEFAULT 0,
    "OrderStock"           numeric(10, 3) DEFAULT 0,
    "IssuedStock"          numeric(10, 3) DEFAULT 0,
    "ReorderStock"         numeric(10, 3) DEFAULT 0,
    "BackorderStock"       numeric(10, 3) DEFAULT 0,

    "Origin"               varchar(50) DEFAULT 'B',
    "ChildCost"            boolean NOT NULL DEFAULT true,
    "ActionNo"             integer,
    "ActionNoPending"      varchar(50),
    "ActionNoIsPending"    boolean NOT NULL DEFAULT false,
    "ActionNoRetire"       varchar(50),
    "ChangeNotes"          text,
    "ReplacesPartNo"       varchar(255),
    "ReplacesRev"          real,
    "ReplacedByPartNo"     varchar(255),
    "ReplacedByRev"        real,

    "NotReleased"          boolean NOT NULL DEFAULT false,
    "ModelDriven"          varchar(50),
    "Software"             varchar(50),
    "Filename"             varchar(255),
    "OriginalFilename"     varchar(255),
    "OriginalSize"         integer,
    "CadType"              varchar(50),
    "FamilyName"           varchar(50),
    "ModelName"            varchar(255),
    "Alpha"                varchar(50),
    "Warehouse"            varchar(50),
    "OldStock"             varchar(50),
    "NewStock"             varchar(50),
    "UsedOn"               text,
    "FileByteCount"        bigint,
    "RevisedBy"            varchar(50),
    "RevisedOn"            timestamp,
    "LastSavedBy"          varchar(50),
    "LastSavedOn"          timestamp,
    "PUnitMeasure"         varchar(50),
    "UUnitMeasure"         varchar(50),
    "Buyer"                varchar(50),
    "Cycle"                real,
    "Crc"                  varchar(50),

    "Version"              integer DEFAULT 0,
    "Priority"             integer,
    "TaxCode"              varchar(50),
    "NominalAccount"       varchar(50),
    "TaxCodeSales"         varchar(50),
    "NominalAccountSales"  varchar(50),
    "Family"               varchar(50),
    "Supplier"             varchar(50),
    "PaintCode"            varchar(50),
    "Factor"               numeric(10, 3) DEFAULT 1,
    "UnitConversion"       numeric(15, 5) DEFAULT 1,
    "AbcClass"             varchar(1),
    "AbcClass1"            varchar(1),
    "CutLhs"               numeric(10, 3),
    "CutRhs"               numeric(10, 3),
    "CutProfile"           varchar(50),
    "MaterialStandard"     varchar(255),
    "Commodity"            varchar(50),
    "ProductClass"         varchar(50),
    "QapProcess"           varchar(50),
    "RequireInspection"    boolean NOT NULL DEFAULT false,
    "SeparateWorkOrder"    boolean NOT NULL DEFAULT false,
    "Inseparable"          boolean NOT NULL DEFAULT false,
    "SerialNoSensitive"    boolean NOT NULL DEFAULT false,
    "CompanyId"            integer,

    -- SQL Server [int] IDENTITY -> PostgreSQL generated identity
    "RowId"                integer GENERATED ALWAYS AS IDENTITY NOT NULL,

    -- SQL Server [timestamp] (rowversion) -> PostgreSQL bytea (approx)
    "Timestamp"            bytea,

    -- More uniqueidentifiers
    "ProcessTemplateId"    uuid,
    "WorkCentresComplete"  boolean NOT NULL DEFAULT false,
    "NoDiscount"           boolean NOT NULL DEFAULT false,
    "StockUnitOfMeasureId" uuid,
    "SalesUoMId"           uuid,
    "StockToSalesUoMConversion" numeric(15, 5),
    "SalesTaxCodeId"       uuid,
    "SalesNominalCodeId"   uuid,
    "PurchaseUoMId"        uuid,
    "PurchaseToStockUoMConversion" numeric(15, 5),
    "PurchaseTaxCodeId"    uuid,
    "PurchaseNominalCodeId" uuid,
    "Finish"               varchar(255),
    "ReverseKitted"        boolean NOT NULL DEFAULT false,
    "WorkcentreProcessTemplateId" uuid,
    "Type"                 varchar(255),
    "OverridePermissionInheritance" boolean NOT NULL DEFAULT false,
    "Colour"               varchar(50),
    "UnitConversion2"      numeric(15, 5) DEFAULT 1,
    "FinishedGoods"        boolean NOT NULL DEFAULT false,
    "IsKit"                boolean NOT NULL DEFAULT false,
    "Serviceable"          boolean NOT NULL DEFAULT false,
    "SUnitMeasure"         varchar(50),
    "Country"              varchar(255),
    "ExcludeChildren"      boolean NOT NULL DEFAULT false,

    -- PRIMARY KEY on ItemId
    CONSTRAINT "PK_Item" PRIMARY KEY ("ItemId")
);

------------------------------------------------------------------------------
-- Foreign key constraints (requires referenced tables to exist in public schema)
------------------------------------------------------------------------------

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_PurchaseNominalCode"
  FOREIGN KEY ("PurchaseNominalCodeId")
  REFERENCES public."NominalCode" ("NominalCodeId");

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_PurchaseTaxCode"
  FOREIGN KEY ("PurchaseTaxCodeId")
  REFERENCES public."TaxCode" ("TaxCodeId");

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_PurchaseUnitMeasure"
  FOREIGN KEY ("PurchaseUoMId")
  REFERENCES public."UnitMeasure" ("UnitMeasureId");

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_SalesNominalCode"
  FOREIGN KEY ("SalesNominalCodeId")
  REFERENCES public."NominalCode" ("NominalCodeId");

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_SalesTaxCode"
  FOREIGN KEY ("SalesTaxCodeId")
  REFERENCES public."TaxCode" ("TaxCodeId");

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_SalesUnitMeasure"
  FOREIGN KEY ("SalesUoMId")
  REFERENCES public."UnitMeasure" ("UnitMeasureId");

ALTER TABLE public."Item"
  ADD CONSTRAINT "FK_Item_StockUnitMeasure"
  FOREIGN KEY ("StockUnitOfMeasureId")
  REFERENCES public."UnitMeasure" ("UnitMeasureId");



//// iooo 
-- Switch to your target database (in psql or pgAdmin's dropdown):
-- \c your_database_name;

-- Enable extension if needed for uuid_generate_v4():
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE public."Material" (
    -- SQL Server [uniqueidentifier] -> PostgreSQL uuid
    -- Default uses uuid_generate_v4() from uuid-ossp
    "MaterialId"         uuid          NOT NULL DEFAULT uuid_generate_v4(),
    
    -- SQL Server [nvarchar](255) -> PostgreSQL varchar(255)
    "Name"               varchar(255),
    "Site"               varchar(255)  DEFAULT 'DEFAULT',
    "Description"        varchar(255),
    "PartNo"             varchar(255),

    -- SQL Server [decimal](18,5) -> PostgreSQL numeric(18,5)
    "Cost"               numeric(18, 5),
    "CostMethod"         varchar(50),

    -- These columns were [nvarchar](50) in SQL Server
    "Weight"             varchar(50),
    "WeightMethod"       varchar(50),
    "Warehouse"          varchar(50),
    "Conversion"         varchar(50),

    "ParentRowId"        integer,
    "PictogramGroup"     varchar(50),
    "MaterialGroup"      varchar(50),
    "MaterialClass"      varchar(50),
    "Standard"           varchar(50),
    "Grade"              varchar(50),
    "Dim1Prefix"         varchar(50),

    -- SQL Server [decimal](18,3) -> PostgreSQL numeric(18,3)
    "Dim1"               numeric(18, 3),
    "Dim1Suffix"         varchar(50),
    "Dim2Prefix"         varchar(50),
    "Dim2"               numeric(18, 3),
    "Dim2Suffix"         varchar(50),
    "Dim3Prefix"         varchar(50),
    "Dim3"               numeric(18, 3),
    "Dim3Suffix"         varchar(50),
    "Dim4Prefix"         varchar(50),
    "Dim4"               numeric(18, 3),
    "Dim4Suffix"         varchar(50),
    "MassDensity"        numeric(18, 2),

    -- SQL Server [bit] -> PostgreSQL boolean
    "Prefered"           boolean       NOT NULL DEFAULT true,
    "NestingMaterial"    varchar(50),
    "UseEnteredMaterial" boolean       NOT NULL DEFAULT true,

    -- IDENTITY(1,1) -> GENERATED ALWAYS AS IDENTITY
    "RowId"              integer       GENERATED ALWAYS AS IDENTITY NOT NULL,

    -- SQL Server [timestamp] (rowversion) -> PostgreSQL bytea
    "Timestamp"          bytea,

    -- decimal(18,2) NOT NULL with default 0
    "CutTime"            numeric(18,2) NOT NULL DEFAULT 0,

    -- SQL Server nvarchar(max) -> PostgreSQL text
    "CostFormula"        text,

    -- PRIMARY KEY on MaterialId
    CONSTRAINT "PK_Material" PRIMARY KEY ("MaterialId")
);




